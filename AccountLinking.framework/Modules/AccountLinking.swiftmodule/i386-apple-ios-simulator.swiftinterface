// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 effective-4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name AccountLinking
@_exported import AccountLinking
import CommonCrypto
import Swift
import UIKit
import WebKit
@objc public enum AccountLinkingViewMode : Swift.Int {
  case automatic = -100
  case userAuth = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Retailer : Swift.Int {
  case target = 1
  case costco = 2
  case cvs = 3
  case dollarGeneral = 4
  case dollarTree = 5
  case kroger = 6
  case samsClub = 9
  case publix = 7
  case walgreens = 10
  case walmart = 11
  case staples = 12
  case homeDepot = 15
  case lowes = 16
  case meijer = 19
  case shopRite = 22
  case heb = 44
  case bjsWholesale = 45
  case wegmans = 52
  case hyVee = 56
  case riteAid = 143
  case giantEagle = 144
  case foodLion = 142
  case familyDollar = 165
  case sephora = 171
  case bestBuy = 177
  case marshalls = 5917
  case tjMaxx = 5921
  case kohls = 5929
  case bedBathAndBeyond = 6074
  case dicksSportingGoods = 6162
  case macys = 6802
  case starbucks = 6677
  case dominosPizza = 8366
  case tacoBell = 8598
  case instacart = 8652
  case nike = 8712
  case shipt = 9016
  case chewy = 9947
  case grubhub = 10208
  case doordash = 10241
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class Account : ObjectiveC.NSObject {
  @objc public var retailer: AccountLinking.Retailer
  @objc public var username: Swift.String
  @objc public var password: Swift.String
  @objc public init(retailer: AccountLinking.Retailer, username: Swift.String, password: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AccountLinkingManager : ObjectiveC.NSObject {
  @objc public var identifier: Swift.String?
  @objc public var identifier1: Swift.String?
  @objc public static let shared: AccountLinking.AccountLinkingManager
  @objc public var analytics: ((Any) -> Swift.Void)?
  @objc public var logMessage: ((Swift.String) -> Swift.Void)?
  @objc public var displayDebugView: ((Any?) -> Swift.Void)?
  @objc public var viewMode: AccountLinking.AccountLinkingViewMode
  @objc public func clearCache(_ retailer: AccountLinking.Retailer, completion: @escaping () -> Swift.Void)
  @objc public func resetOrdersHistoryForRetailer(_ retailer: AccountLinking.Retailer)
  @objc public func updateConfiguration(_ data: Foundation.Data)
  @objc public func verifyAccount(_ account: AccountLinking.Account, completion: @escaping (UIKit.UIViewController?, Foundation.NSError?) -> Swift.Void)
  @objc public func grabNewOrders(_ account: AccountLinking.Account, dayCutoff: Swift.Double, completion: @escaping ([[Swift.AnyHashable : Any]], Swift.Int, UIKit.UIViewController?, Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AuthorizationViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension AccountLinking.AccountLinkingViewMode : Swift.Equatable {}
extension AccountLinking.AccountLinkingViewMode : Swift.Hashable {}
extension AccountLinking.AccountLinkingViewMode : Swift.RawRepresentable {}
extension AccountLinking.Retailer : Swift.Equatable {}
extension AccountLinking.Retailer : Swift.Hashable {}
extension AccountLinking.Retailer : Swift.RawRepresentable {}
